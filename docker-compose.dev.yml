services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--api.insecure=true"
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - ./traefik/traefik-dev.yml:/etc/traefik/traefik.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - web
    restart: always

  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - web
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}", "-d", "mlflowdb"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 5s
    restart: always

  prefect-ui:
    build:
      context: ./prefect-ui
      dockerfile: Dockerfile
    command: ["prefect", "server", "start", "--host", "0.0.0.0", "--port", "4200"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prefect.rule=Host(`localhost`)"
      - "traefik.http.routers.prefect.entrypoints=web"
      - "traefik.docker.network=web"
    networks:
      - web
    environment:
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/mlflowdb
    ports:
      - "4200:4200"
    restart: always

  prefect-worker1:
    image: prefecthq/prefect:3-latest
    command: ["prefect", "worker", "start", "--pool", "local-process"]
    environment:
      - PREFECT_API_URL=http://workflows.mlworkshop.space:4200/api
    networks:
      - web
    restart: always

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    networks:
      - web
    deploy:
      restart_policy:
        condition: on-failure

  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    command:
      - "mlflow"
      - "server"
      - "--backend-store-uri=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/mlflowdb"
      - "--default-artifact-root=s3://mlflow"
      - "--host=0.0.0.0"
      - "--port=5000"
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_TRACKING_SERVER_SCHEMA: mlflow_schema
    networks:
      - web
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    ports:
      - "5000:5000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mlflow.rule=Host(`mlflow.your-domain.com`)"
      - "traefik.http.services.mlflow.loadbalancer.server.port=5000"
    restart: always

networks:
  web:
    driver: bridge

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local
  mlflow_data:
    driver: local

# Environment variable file (optional but recommended)
# .env file example:
# POSTGRES_USER=admin
# POSTGRES_PASSWORD=admin
# POSTGRES_DB=mlworkshopdb
# MINIO_ROOT_USER=minioadmin
# MINIO_ROOT_PASSWORD=minioadmin
